trigger:
  branches:
    include:
      - main  # Trigger pipeline on commits to the main branch

pool:
  name: 'Default'

variables:
  terraformVersion: '1.5.5'  # Specify the Terraform version
  azureServiceConnection: 'azurerm'  # Azure service connection name

# Define environment-specific variables
variables:
  dev:
    backendResourceGroup: 'dev-rg'
    backendStorageAccount: 'devtfstate'
    backendContainer: 'tfstate'
    backendKey: 'terraform-dev.tfstate'
  test:
    backendResourceGroup: 'test-rg'
    backendStorageAccount: 'testtfstate'
    backendContainer: 'tfstate'
    backendKey: 'terraform-test.tfstate'
  prod:
    backendResourceGroup: 'prod-rg'
    backendStorageAccount: 'prodtfstate'
    backendContainer: 'tfstate'
    backendKey: 'terraform-prod.tfstate'

stages:
  # Stage 1: Initialization (init, validate, lint) for dev environment
  - stage: InitializationDev
    jobs:
      - job: TerraformInitDev
        steps:
          - task: TerraformInstaller@0  # Install Terraform
            inputs:
              terraformVersion: $(terraformVersion)

          # Initialize Terraform for dev
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              backendServiceArm: $(azureServiceConnection)
              backendAzureRmResourceGroupName: $(dev.backendResourceGroup)
              backendAzureRmStorageAccountName: $(dev.backendStorageAccount)
              backendAzureRmContainerName: $(dev.backendContainer)
              backendAzureRmKey: $(dev.backendKey)
              command: 'init'  # Initialize Terraform
              workingDirectory: 'terraform'  # Set the working directory

          # Validate Terraform configuration
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'validate'  # Validate Terraform configuration
              workingDirectory: 'terraform'

          # Publish the Terraform state as an artifact
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'terraform'
              artifactName: 'terraform-state-dev'

  # Stage 2: Plan for dev environment
  - stage: PlanDev
    dependsOn: InitializationDev  # The Plan stage depends on the Initialization stage
    jobs:
      - job: TerraformPlanDev
        steps:
          # Download the Terraform state artifact
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'terraform-state-dev'
              downloadPath: 'terraform'

          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'plan'  # Run terraform plan
              environmentServiceNameAzureRM: $(azureServiceConnection)  # Azure service connection for authentication
              workingDirectory: 'terraform'  # Set the working directory

  # Stage 3: Apply for dev environment (with manual approval)
  - stage: ApplyDev
    dependsOn: PlanDev  # The Apply stage depends on the Plan stage
    jobs:
      - job: waitForValidationDev
        displayName: Wait for external validation  
        pool: server    
        timeoutInMinutes: 4320 # job times out in 3 days
        steps:   
        - task: ManualValidation@0
          timeoutInMinutes: 1440 # task times out in 1 day
          inputs:
              notifyUsers: |
                  lukebyrnee97@gmail.com
              instructions: 'Please validate the build configuration and resume'
              onTimeout: 'resume'
      - job: TerraformApplyDev
        steps:
          # Download the Terraform state artifact
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'terraform-state-dev'
              downloadPath: 'terraform'
              
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'apply'  # Run terraform apply
              backendServiceArm: $(azureServiceConnection)
              commandOptions: '--auto-approve'
              environmentServiceNameAzureRM: $(azureServiceConnection)  # Azure service connection for authentication
              workingDirectory: 'terraform'  # Set the working directory

  # Repeat similar stages for Test and Prod environments
  # Adjust backend variables and artifact names accordingly
